import { access, mkdir, readFile, writeFile } from 'fs/promises';
import { Errors } from 'moleculer';
import { join } from 'path';
import { cwd } from 'process';

import type { ServiceSchema } from 'moleculer';

const mixin: ServiceSchema = {
  actions: {
    exist: {
      async handler({ params }) {
        const { filename } = params;

        try {
          await access(this.__resolvePath(filename));

          return true;
        } catch (e) {
          return false;
        }
      },
      params: {
        filename: 'string',
      },
    },

    read: {
      async handler({ params }) {
        const { filename } = params;

        try {
          const content = await readFile(this.__resolvePath(filename));

          return JSON.parse(content.toString());
        } catch (e) {
          return null;
        }
      },
      params: {
        filename: 'string',
      },
    },

    write: {
      async handler({ params }) {
        const { filename, value } = params;

        try {
          await writeFile(this.__resolvePath(filename), JSON.stringify(value));

          return undefined;
        } catch (e) {
          return null;
        }
      },
      params: {
        filename: 'string',
        value: 'any',
      },
    },
  },

  methods: {
    __resolvePath(id = '') {
      const { namespace, path: dataPath } = this.settings;

      return join(cwd(), ...[dataPath, namespace, id].filter(Boolean));
    },
  },

  name: 'file',

  settings: {
    path: 'data',
  },

  async created() {
    const { namespace = this.name, path: dataPath } = this.settings ?? {};

    if (!namespace) {
      throw new Errors.ServiceSchemaError(
        `[File]: 'namespace' is not defined. 'namespaced' defines the folder name in which files will be stored for this service. Define 'settings.namespace' in your service.`,
        namespace,
      );
    }

    if (!dataPath) {
      throw new Errors.ServiceSchemaError(
        `[File]: 'path' is not defined. 'path' defines where the data generated by [File] mixin will be stored. Define 'settings.path' in your service. By default 'path' is defined as './data'.`,
        dataPath,
      );
    }
  },

  async started() {
    try {
      await access(this.__resolvePath());
    } catch (e) {
      await mkdir(this.__resolvePath());
    }
  },
};

export default mixin;
